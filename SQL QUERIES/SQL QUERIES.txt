All the queries come from the SQL Query Examples section from User Manual.

Query 1: Find the titles of all books by Pratchett that cost less than $10

SELECT B.TITLE
FROM BOOK AS B, AUTHOR AS A, WRITTEN_BY AS W, INVENTORY AS I
WHERE A.AUTHORID = W.AUTHORID AND B.ISBN = W.ISBN AND I.ISBN = B.ISBN AND A.NAME LIKE '% PRATCHETT' AND I.SELLING_PRICE < 10;


Query 2: Give all the titles and their dates of purchase made by customer named Isaac Newton

SELECT B.TITLE, CPO.TIME
FROM BOOK AS B, CUSTOMER_PURCHASE_ORDER AS CPO, CUSTOMER AS C
WHERE C.CUSTOMERID = CPO.CUSTOMERID AND CPO.ISBN = B.ISBN AND C.NAME = 'ISAAC NEWTON';


Query 3: Find the titles and ISBNs for all books with less than 5 copies in stock

SELECT B.TITLE, B.ISBN
FROM BOOK AS B, INVENTORY AS I
WHERE B.ISBN = I.ISBN AND I.QUANTITY < 5;


Query 4: Give all the customers who purchased a book by Pratchett and the titles of Pratchett books they purchased

SELECT C.NAME, B.TITLE
FROM CUSTOMER AS C, BOOK AS B, CUSTOMER_PURCHASE_ORDER AS CPO, AUTHOR AS A, WRITTEN_BY AS W
WHERE C.CUSTOMERID = CPO.CUSTOMERID AND B.ISBN = CPO.ISBN AND B.ISBN = W.ISBN AND A.AUTHORID =  W.AUTHORID AND A.NAME LIKE '% PRATCHETT';


Query 5: Find the total number of books purchased by a customer named Isaac Newton

SELECT SUM(CPO.QUANTITY) AS BOOKS_PURCHASED
FROM CUSTOMER AS C, CUSTOMER_PURCHASE_ORDER AS CPO
WHERE CPO.CUSTOMERID = C.CUSTOMERID AND C.NAME = 'ISAAC NEWTON';


Query 6: Find the customer who has purchased the most books and the total number of books they have purchased

SELECT NAME, MAX(BOOKS_PURCHASED)
FROM
(SELECT C.NAME, SUM(CPO.QUANTITY) AS BOOKS_PURCHASED
FROM CUSTOMER AS C, CUSTOMER_PURCHASE_ORDER AS CPO
WHERE C.CUSTOMERID = CPO.CUSTOMERID
GROUP BY C.CUSTOMERID);


Query 7: Find the salesperson who generated the most revenue (Books Sold * Price of Books)

SELECT NAME, MAX(TOTAL_SALES) AS TOTAL_SALES
    FROM
   	 (SELECT E.NAME, SUM(CPO.PRICE * CPO.QUANTITY) AS TOTAL_SALES
   	 FROM EMPLOYEE AS E, CUSTOMER_PURCHASE_ORDER AS CPO
   	 WHERE E.EMPLOYEEID = CPO.EMPLOYEEID
   	 GROUP BY E.EMPLOYEEID);


Query 8: Find the total amount of sales revenue earned 

SELECT SUM(CPO.PRICE * CPO.QUANTITY) AS TOTAL_REVENUE
FROM CUSTOMER_PURCHASE_ORDER AS CPO;


Query 9: Find the total amount of expense on inventory

SELECT SUM(I.PURCHASE_PRICE * I.QUANTITY) AS TOTAL_COST_OF_INVENTORY
FROM INVENTORY AS I;


Query 10: Find the total cost of goods sold

SELECT SUM(I.PURCHASE_PRICE * CPO.QUANTITY) AS COST_OF_GOODS_SOLD
FROM CUSTOMER_PURCHASE_ORDER AS CPO, BOOK AS B, INVENTORY AS I
WHERE B.ISBN = CPO.ISBN AND I.ISBN = CPO.ISBN;


Query 11: Provide a list of customer names, along with the total dollar amount each customer has spent

SELECT NAME, DOLLARS_SPENT
FROM
(SELECT C.NAME, SUM(CPO.PRICE * CPO.QUANTITY) AS DOLLARS_SPENT
FROM CUSTOMER AS C, CUSTOMER_PURCHASE_ORDER AS CPO
WHERE C.CUSTOMERID = CPO.CUSTOMERID
GROUP BY C.CUSTOMERID);


Query 12: Provide a list of customer names and e-mail addresses for customers who have spent more than the average customer

SELECT C.NAME, C.EMAIL
FROM CUSTOMER AS C, CUSTOMER_PURCHASE_ORDER AS CPO
WHERE C.CUSTOMERID = CPO.CUSTOMERID
GROUP BY C.CUSTOMERID
HAVING SUM(CPO.PRICE * CPO.QUANTITY) >
(SELECT AVG(DOLLARS_SPENT)
FROM
(SELECT SUM(CPO.PRICE * CPO.QUANTITY) AS DOLLARS_SPENT
FROM CUSTOMER AS C, CUSTOMER_PURCHASE_ORDER AS CPO
WHERE C.CUSTOMERID = CPO.CUSTOMERID
GROUP BY C.CUSTOMERID));


Query 13: Provide a list of the titles in the database and associated total copies sold to customers, sorted from the title that has sold the most individual copies to the title that has sold the least

SELECT B.TITLE, SUM(CPO.QUANTITY) AS TOTAL_SOLD
FROM BOOK AS B, CUSTOMER_PURCHASE_ORDER AS CPO
WHERE B.ISBN = CPO.ISBN
GROUP BY B.ISBN
ORDER BY TOTAL_SOLD DESC;


Query 14: Provide a list of the titles in the database and associated dollar totals for copies sold to customers, sorted from the title that has sold the highest dollar amount to the title that has sold the smallest

SELECT B.TITLE, SUM(CPO.QUANTITY * CPO.PRICE) AS TOTAL_SALES
FROM BOOK AS B, CUSTOMER_PURCHASE_ORDER AS CPO
WHERE B.ISBN = CPO.ISBN
GROUP BY B.ISBN
ORDER BY TOTAL_SALES DESC;


Query 15: Find the most popular author in the database (i.e. the one who has sold the most books)

SELECT NAME, MAX(TOTAL_BOOKS_SOLD)
FROM
(SELECT A.NAME, SUM(CPO.QUANTITY) AS TOTAL_BOOKS_SOLD
FROM AUTHOR AS A, CUSTOMER_PURCHASE_ORDER AS CPO, WRITTEN_BY AS W
WHERE A.AUTHORID = W.AUTHORID AND W.ISBN = CPO.ISBN
GROUP BY A.AUTHORID);


Query 16: Find the most profitable author in the database for this store (i.e. the one who has brought in the most money)

SELECT NAME, MAX(TOTAL_SALES)
FROM
(SELECT A.NAME, SUM(CPO.QUANTITY * CPO.PRICE) AS TOTAL_SALES
FROM AUTHOR AS A, CUSTOMER_PURCHASE_ORDER AS CPO, WRITTEN_BY AS W
WHERE A.AUTHORID = W.AUTHORID AND W.ISBN = CPO.ISBN
GROUP BY A.AUTHORID);


Query 17: Provide a list of customer information for customers who purchased anything written by the most profitable author in the database

SELECT C.*
FROM CUSTOMER AS C, WRITTEN_BY AS W, CUSTOMER_PURCHASE_ORDER AS CPO,
(SELECT A.AUTHORID
FROM
(
SELECT A.AUTHORID, MAX(TOTAL_SALES)
FROM
(SELECT A.AUTHORID, SUM(CPO.QUANTITY * CPO.PRICE) AS TOTAL_SALES
FROM AUTHOR AS A, CUSTOMER_PURCHASE_ORDER AS CPO, WRITTEN_BY AS W
WHERE A.AUTHORID = W.AUTHORID AND W.ISBN = CPO.ISBN
GROUP BY A.AUTHORID) AS A)
AS A)
AS X
WHERE X.AUTHORID = W.AUTHORID AND W.ISBN = CPO.ISBN AND C.CUSTOMERID = CPO.CUSTOMERID;


Query 18: Provide the list of authors who wrote the books purchased by the customers who have spent more than the average customer

SELECT DISTINCT(A.NAME)
FROM CUSTOMER_PURCHASE_ORDER AS CPO, AUTHOR AS A, WRITTEN_BY AS W,
(
SELECT C.CUSTOMERID
FROM CUSTOMER AS C, CUSTOMER_PURCHASE_ORDER AS CPO
WHERE C.CUSTOMERID = CPO.CUSTOMERID
GROUP BY C.CUSTOMERID
HAVING SUM(CPO.PRICE * CPO.QUANTITY) >
(
SELECT AVG(DOLLARS_SPENT)
FROM
(
SELECT SUM(CPO.PRICE * CPO.QUANTITY) AS DOLLARS_SPENT
FROM CUSTOMER AS C, CUSTOMER_PURCHASE_ORDER AS CPO
WHERE C.CUSTOMERID = CPO.CUSTOMERID
GROUP BY C.CUSTOMERID
)
)
) AS X
WHERE X.CUSTOMERID = CPO.CUSTOMERID AND A.AUTHORID = W.AUTHORID AND W.ISBN = CPO.ISBN

